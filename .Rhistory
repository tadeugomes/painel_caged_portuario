style = "font-size: 30px; font-weight: bold;"),  # Aumenta o tamanho e deixa em negrito
style = "text-align: center; padding-right: 20px;"
),
titleWidth = 1800  # Largura ajustada do título
),
dashboardSidebar(
tags$div(
tags$img(src = "img/logo.png", height = "50px", width = "200px"),
style = "text-align: center; padding: 10px;"
),
sidebarMenu(
menuItem("Movimentações", tabName = "evolucao", icon = icon("line-chart")),
menuItem("Características", tabName = "distribuicao", icon = icon("bar-chart")),
selectInput("uf_selecionada", "Selecione a UF:",
choices = unique(df_tres$sigla_uf),
selected = "MA")  # "MA" é o valor selecionado por padrão
),
# Adicionando a caixa de texto
tags$div(
"O objetivo do painel é apresentar os dados formais do mercado   de trabalho formal do setor portuário, disseminando dados que possam
subsidiar o processo de tomade de decisão",
style = "
color: #ffffff;              /* Cor do texto */
background-color: #00000000; /* Fundo transparente */
padding: 10px;               /* Espaçamento interno */
white-space: pre-wrap;       /* Habilitar quebra de linha */
font-size: 14px;             /* Tamanho da fonte */
text-align: justify;         /* Justifica o texto */
"
),
# Adicionando a imagem na parte inferior
tags$div(
tags$h4("Financiamento", style = "text-align: center;"),  # Título da imagem
tags$img(src = "img/logo_itaqui.jpeg", height = "80px"),  # Ajuste o caminho da imagem
style = "position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);"
)
),
dashboardBody(
tabItems(
# Primeira Aba: Gráfico de Linhas, Gráfico de Barras, Mapa, Título e ValueBoxes
tabItem(tabName = "evolucao",
fluidRow(
tags$h3("Movimentações do emprego formal em junho", style = "text-align: center; margin-bottom: 20px;")
),
fluidRow(
valueBoxOutput("saldoPaisBox"),
valueBoxOutput("saldoVariacaoBox"),
valueBoxOutput("saldoVariacaoTrimestralBox")
),
fluidRow(
box(title = "", width = 12, highchartOutput("lineplot"),
solidHeader = TRUE,
status = "primary")
),
fluidRow(
column(2,
box(width = NULL,
selectInput("mes_selecionado", "Selecione o mês:",
choices = format(seq.Date(from = min(df_resumo$data_mes),
to = max(df_resumo$data_mes),
by = "month"), "%Y-%m"),
selected = "2024-06"))
),
column(5,
box(title = "Saldo por Unidade Federativa", width = NULL, highchartOutput("barchart"))
),
column(5,
box(title = " ", width = NULL, highchartOutput("mapa"))
)
),
# Novo fluidRow para os gráficos de sexo, lado a lado
fluidRow(
column(6,
box(title = "Admitidos e Desligados por sexo no MA", width = NULL,
solidHeader = TRUE,
status = "primary",
highchartOutput("barplot", height = "400px")
)
),
column(6,
box(title = "Movimentação de vínculos por sexo no Brasil", width = NULL,
solidHeader = TRUE,
status = "primary",
plotOutput("grafico_movimentacao_sexo_br", height = "400px")
)
)
),
# Novo fluidRow para o gráfico de movimentação por região
fluidRow(
column(12,
box(title = "Movimentação de vínculos por região", width = NULL,
solidHeader = TRUE,
status = "primary",
plotOutput("grafico_movimentacao_regiao", height = "400px")
)
)
),
# Novo fluidRow para o gráfico de movimentações por grau de escolaridade
fluidRow(
column(12,
box(title = "Movimentações por grau de escolaridade no país", width = NULL,
solidHeader = TRUE,
status = "primary",
plotOutput("grafico_movimentacao_escolaridade", height = "400px")
)
)
)
),
# Segunda Aba: Tabelas Interativas
tabItem(tabName = "distribuicao",
fluidRow(
valueBoxOutput("outroBox1"),
valueBoxOutput("outroBox2")
),
# Primeiro boxplot:
fluidRow(
box(title = "Mediana salarial por estado",
solidHeader = TRUE,
status = "primary",
width = 12, plotOutput("boxplot_salario_uf"))
),
# Segundo boxplot:
fluidRow(
box(title = "Mediana salarial por região",
solidHeader = TRUE,
status = "primary",
width = 12, plotOutput("boxplot_salario_regiao"))
),
# Tabelas:
fluidRow(
box(title = "Estados com maior saldo por ocupação (CBO)",
solidHeader = TRUE,
status = "primary",
width = 6, DTOutput("tabela_interativa_cbo")),
box(title = "Estados com maior saldo por atividade Econômica (CNAE Subclasse)",
solidHeader = TRUE,
status = "primary",
width = 6, DTOutput("tabela_interativa_cnae"))
)
)
)
),
skin = "blue"
)
# --- Lógica do Servidor ---
server <- function(input, output) {
# Renderização do gráfico de saldo_movimentacao por regiao
output$grafico_movimentacao_regiao <- renderPlot({
ultimo_dado %>%
group_by(regiao) %>%
count(saldo_movimentacao) %>%
ggplot(aes(x = regiao, y = n, fill = saldo_movimentacao)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5), # Posição no centro da barra
size = 3, # Tamanho do texto
color = "black") + # Cor do texto
labs(title = "",
x = "",
y = "",
fill = "") + # Adiciona o título da legenda
scale_fill_manual(values = c("Admitidos" = "#87CEFA", "Desligados" = "#FF6347")) + # Define as cores personalizadas
theme_minimal() +
theme(
text = element_text(size = 10), # Tamanho do texto geral
axis.text.x = element_text(size = 8), # Tamanho do texto do eixo X
axis.text.y = element_text(size = 8), # Tamanho do texto do eixo Y
legend.position = "bottom" # Posiciona a legenda na parte inferior do gráfico
)
})
# Renderização do gráfico de saldo_movimentacao por sexo no Brasil
output$grafico_movimentacao_sexo_br <- renderPlot({
ultimo_dado %>%
group_by(sexo) %>%
count(saldo_movimentacao) %>%
ggplot(aes(x = sexo, y = n, fill = saldo_movimentacao)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5), # Posição no centro da barra
size = 3, # Tamanho do texto
color = "black") + # Cor do texto
labs(title = "",
x = "",
y = "",
fill = "Movimentações") + # Adiciona o título da legenda
theme_minimal()
})
# Renderização do gráfico de movimentações por grau de escolaridade
output$grafico_movimentacao_escolaridade <- renderPlot({
ultimo_dado %>%
group_by(grau_instrucao) %>%
count(saldo_movimentacao) %>%
ggplot(aes(x = grau_instrucao, y = n, fill = saldo_movimentacao)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) + # Barras lado a lado
coord_flip() + # Inverte os eixos para melhor visualização
geom_text(aes(label = n),
position = position_dodge(width = 0.8), # Ajusta a posição do texto para barras lado a lado
vjust = 0.5, # Ajusta a posição vertical do texto
size = 3, # Tamanho do texto
color = "black") + # Cor do texto
labs(title = "",
x = "",
y = "",
fill = "Movimentações") + # Adiciona o título da legenda
theme_minimal()
})
output$saldoPaisBox <- renderValueBox({
saldo_uf <- df_variacao %>%
filter(sigla_uf == input$uf_selecionada & data_mes == max(data_mes)) %>%
pull(saldo_somado)
valueBox(
value = saldo_uf,
subtitle = paste("Saldo em", input$uf_selecionada),
icon = icon("chart-line"),
color = "blue"
)
})
output$saldoVariacaoBox <- renderValueBox({
variacao_anual <- df_variacao %>%
filter(sigla_uf == input$uf_selecionada & data_mes == max(data_mes)) %>%
summarise(total_variacao = sum(percentual_variacao, na.rm = TRUE))
valueBox(
value = paste0(variacao_anual$total_variacao, "%"),
subtitle = "Variação Anual",
icon = icon("chart-line"),
color = "purple"
)
})
output$saldoVariacaoTrimestralBox <- renderValueBox({
variacao_trimestral <- df_variacao %>%
filter(sigla_uf == input$uf_selecionada & data_mes == max(data_mes)) %>%
summarise(total_variacao = sum(variacao_trimestral, na.rm = TRUE)) %>%
pull(total_variacao)
valueBox(
value = paste0(variacao_trimestral, "%"),
subtitle = "Variação Trimestral",
icon = icon("chart-bar"),
color = "green"
)
})
dados_filtrados_barplot <- reactive({
ultimo_dado %>%
filter(sigla_uf == input$uf_selecionada) %>%
select(sigla_uf, saldo_movimentacao, sexo, indicador_trabalho_parcial, indicador_trabalho_intermitente)
})
dados_filtrados_lineplot <- reactive({
df_tres %>%
filter(sigla_uf == input$uf_selecionada)
})
dados_salario_uf <- reactive({
ultimo_dado %>%
filter(sigla_uf == input$uf_selecionada)
})
tabela_cruzada <- reactive({
variavel <- "saldo_movimentacao"  # Variável fixa como saldo_movimentacao
criar_crosstable_generalizado(dados_filtrados_barplot(), variavel, "sexo")
})
# Renderização do gráfico de saldo por sexo
output$barplot <- renderHighchart({
# Definir a variável como saldo_movimentacao, que corresponde a saldo_somado
variavel <- "saldo_movimentacao"
# Gerar a tabela cruzada com a variável definida
tabela <- tabela_cruzada() %>%
pivot_longer(cols = -1, names_to = "Categoria", values_to = "Contagem")
# Renderizar o gráfico de barras
hchart(tabela, "column", hcaes(x = .data[[variavel]], y = Contagem, group = Categoria)) %>%
hc_title(text = paste("Admitidos e Desligados por sexo em", input$uf_selecionada)) %>%
hc_xAxis(title = list(text = "")) %>%
hc_yAxis(title = list(text = "Contagem")) %>%
hc_legend(title = list(text = "Sexo")) %>%
hc_plotOptions(column = list(
dataLabels = list(enabled = FALSE),
stacking = "normal"
)) %>%
hc_tooltip(shared = TRUE) %>%
hc_colors(c("#71B1D9", "#70955E"))  # Azul para homens, Verde para mulheres
})
output$lineplot <- renderHighchart({
df_tres <- dados_filtrados_lineplot()
dados_ma_agrupado_2 <- df_tres %>%
group_by(data, saldo_movimentacao) %>%
summarise(contagem = n(), .groups = 'drop') %>%
pivot_wider(names_from = saldo_movimentacao, values_from = contagem, values_fill = list(contagem = 0)) %>%
mutate(saldo = coalesce(Admitidos, 0) - coalesce(Desligados, 0))
highchart() %>%
hc_title(text = paste("Evolução Mensal de Admitidos, Desligados e Saldo em", input$uf_selecionada)) %>%
hc_xAxis(type = "datetime", title = list(text = "Mês/Ano")) %>%
hc_yAxis(title = list(text = "Quantidade")) %>%
hc_add_series(data = dados_ma_agrupado_2, type = "line",
hcaes(x = data, y = Admitidos), name = "Admitidos",
color = "#73BCD9", lineWidth = 2) %>%
hc_add_series(data = dados_ma_agrupado_2, type = "line",
hcaes(x = data, y = Desligados), name = "Desligados",
color = "#ff7f0e", lineWidth = 2) %>%
hc_add_series(data = dados_ma_agrupado_2, type = "line",
hcaes(x = data, y = saldo), name = "Saldo",
color = "#2ca02c", dashStyle = "Dash", lineWidth = 2) %>%
hc_tooltip(shared = TRUE, crosshairs = TRUE,
pointFormat = "<b>{series.name}: {point.y}</b><br/>") %>%
hc_legend(title = list(text = "Tipo de Movimentação")) %>%
hc_chart(zoomType = "x") %>%
hc_exporting(enabled = TRUE)
})
output$barchart <- renderHighchart({
mes_selecionado <- input$mes_selecionado
create_chart(mes_selecionado)
})
output$mapa <- renderHighchart({
dados_estados <- get_data_mapa(as.Date(paste0(input$mes_selecionado, "-01")))
n_cores <- 9
paleta_cores <- colorRampPalette(brewer.pal(n_cores, "Blues"))(10)
valor_min <- min(dados_estados$saldo_somado, na.rm = TRUE)
valor_max <- max(dados_estados$saldo_somado, na.rm = TRUE)
highchart(type = "map") %>%
hc_add_series_map(br_map, dados_estados, value = "saldo_somado", joinBy = c("hc-a2", "sigla_uf")) %>%
hc_title(text = paste("Saldo por UF -", input$mes_selecionado)) %>%
hc_colorAxis(
min = valor_min,
max = valor_max,
type = "linear",
stops = color_stops(n = 100, colors = paleta_cores),
lineColor = "#FFFFFF",
minColor = "#A2E4F2",
maxColor = "#0D0D0D"
) %>%
hc_legend(
enabled = TRUE,
layout = "vertical",
align = "right",
verticalAlign = "middle"
) %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_tooltip(
formatter = JS("function() {
return '<b>' + this.point.name + '</b><br>' +
'Saldo: ' + Highcharts.numberFormat(this.point.value, 0);
}")
)
})
output$tabela_interativa_cbo <- renderDT({
tabela_top10_cbo <- ultimo_dado %>%
group_by(sigla_uf, cbo_2002) %>%
summarise(
admitidos = sum(saldo_movimentacao == "Admitidos"),
desligados = sum(saldo_movimentacao == "Desligados"),
saldo = admitidos - desligados) %>%
arrange(desc(saldo)) %>%
top_n(10, saldo)
datatable(tabela_top10_cbo, options = list(pageLength = 10, autoWidth = TRUE),
colnames = c("UF", "Ocupação", "Admitidos", "Desligados", "Saldo"))
})
output$tabela_interativa_cnae <- renderDT({
tabela_top10_cnae <- ultimo_dado %>%
group_by(sigla_uf, cnae_2_subclasse) %>%
summarise(
admitidos = sum(saldo_movimentacao == "Admitidos"),
desligados = sum(saldo_movimentacao == "Desligados"),
saldo = admitidos - desligados) %>%
arrange(desc(saldo)) %>%
top_n(10, saldo)
datatable(tabela_top10_cnae, options = list(pageLength = 10, autoWidth = TRUE),
colnames = c("UF", "Atividade Econômica", "Admitidos", "Desligados", "Saldo"))
})
output$boxplot_salario_uf <- renderPlot({
dados <- dados_salario_uf()
quartis <- quantile(dados$salario_mensal, probs = c(0.25, 0.75), na.rm = TRUE)
IQR <- quartis[2] - quartis[1]
limite_inferior <- quartis[1] - 1.5 * IQR
limite_superior <- quartis[2] + 1.5 * IQR
dados_sem_outliers_extremos_UF <- dados %>%
filter(salario_mensal >= limite_inferior & salario_mensal <= limite_superior)
dados_sem_outliers_extremos_UF <- na.omit(dados_sem_outliers_extremos_UF)
medianas <- dados_sem_outliers_extremos_UF %>%
group_by(regiao, saldo_movimentacao) %>%
summarise(mediana_salario = median(salario_mensal, na.rm = TRUE))
ggplot(dados_sem_outliers_extremos_UF, aes(x = saldo_movimentacao, y = salario_mensal, fill = regiao)) +
geom_boxplot() +
geom_text(data = medianas, aes(label = format(mediana_salario, digits = 2, big.mark = ".", decimal.mark = ","), y = mediana_salario),
position = position_dodge(width = 0.75),
vjust = -0.5,
color = "black",
size = 3.5) +
labs(title = paste("Mediana do salário mensal em", input$uf_selecionada),
x = "",
y = "Mediana do salário mensal (R$)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 1, hjust = 1),
legend.position = "none")
})
output$boxplot_salario_regiao <- renderPlot({
salario_regiao <- ultimo_dado
quartis <- quantile(salario_regiao$salario_mensal, probs = c(0.25, 0.75), na.rm = TRUE)
IQR <- quartis[2] - quartis[1]
limite_inferior <- quartis[1] - 1.5 * IQR
limite_superior <- quartis[2] + 1.5 * IQR
dados_sem_outliers_extremos_regiao <- salario_regiao %>%
filter(salario_mensal >= limite_inferior & salario_mensal <= limite_superior)
dados_sem_outliers_extremos_regiao <- na.omit(dados_sem_outliers_extremos_regiao)
medianas <- dados_sem_outliers_extremos_regiao %>%
group_by(regiao, saldo_movimentacao) %>%
summarise(mediana_salario = median(salario_mensal, na.rm = TRUE))
ggplot(dados_sem_outliers_extremos_regiao, aes(x = saldo_movimentacao, y = salario_mensal, fill = regiao)) +
geom_boxplot() +
geom_text(data = medianas, aes(label = format(mediana_salario, digits = 2, big.mark = ".", decimal.mark = ","), y = mediana_salario),
position = position_dodge(width = 0.75),
vjust = -0.5,
color = "black",
size = 3.5) +
facet_wrap(~regiao, scales = "free_x") +
labs(title = "Mediana do salário por região",
x = "",
y = "Mediana do salário mensal (R$)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 1, hjust = 1),
legend.position = "none")
})
}
# Executa o aplicativo Shiny
shinyApp(ui = ui, server = server)
ultimo_dado %>%
group_by(sexo) %>%
count(saldo_movimentacao) %>%
ggplot(aes(x = sexo, y = n, fill = saldo_movimentacao)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5), # Posição no centro da barra
size = 3, # Tamanho do texto
color = "black") +
op_style
# Renderização do gráfico de movimentações por grau de escolaridade
output$grafico_movimentacao_escolaridade <- renderPlot({
ultimo_dado %>%
group_by(grau_instrucao) %>%
count(saldo_movimentacao) %>%
ggplot(aes(x = grau_instrucao, y = n, fill = saldo_movimentacao)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) + # Barras lado a lado
coord_flip() + # Inverte os eixos para melhor visualização
geom_text(aes(label = n),
position = position_dodge(width = 0.8), # Ajusta a posição do texto para barras lado a lado
vjust = 0.5, # Ajusta a posição vertical do texto
size = 3, # Tamanho do texto
color = "black") + # Cor do texto
labs(title = "",
x = "",
y = "",
fill = "Movimentações") + # Adiciona o título da legenda
theme_minimal()
})
# Verificação e carregamento das bibliotecas necessárias
if(!require('shiny')) {install.packages('shiny'); library(shiny)}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ultimo_dado)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='observatorioportuario',
token='7B900E148A6A9C2EA3F5D096568666FD',
secret='8BW/lYWqgmb2XV91pP8fxq7MW8ZNRBUI7LKq2Dbk')
library(rsconnect)
rsconnect::setAccountInfo(name='observatorioportuario',
token='7B900E148A6A9C2EA3F5D096568666FD',
secret='8BW/lYWqgmb2XV91pP8fxq7MW8ZNRBUI7LKq2Dbk')
rsconnect::deployApp('C:/Users/tadeu/OneDrive/Documentos/GitHub/painel_caged_portuario')
rsconnect::deployApp('C:/Users/tadeu/OneDrive/Documentos/GitHub/painel_caged_portuario')
rsconnect::deployApp('C:\Users\tadeu\OneDrive\Documentos\GitHub\painel_caged_portuario')
save.image("~/GitHub/painel_caged_portuario/data/ambiente.RData")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='observatorioportuario',
token='7B900E148A6A9C2EA3F5D096568666FD',
secret='8BW/lYWqgmb2XV91pP8fxq7MW8ZNRBUI7LKq2Dbk')
rsconnect::deployApp('C:/Users/tadeu/OneDrive/Documentos/GitHub/painel_caged_portuario')
runApp()
rsconnect::deployApp('C:/Users/tadeu/OneDrive/Documentos/GitHub/painel_caged_portuario')
